Input :

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

class AttendanceRecord {
    String empId;
    String empName;
    Date checkIn;
    Date checkOut;

    public AttendanceRecord(String empId, String empName, Date checkIn, Date checkOut) {
        this.empId = empId;
        this.empName = empName;
        this.checkIn = checkIn;
        this.checkOut = checkOut;
    }

    public String getDateKey() {
        return new SimpleDateFormat("yyyy-MM-dd").format(checkIn);
    }

    public String getMonthKey() {
        return new SimpleDateFormat("yyyy-MM").format(checkIn);
    }

    public String toString() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        return empId + " | " + empName + " | In: " + sdf.format(checkIn) + " | Out: " +
                (checkOut != null ? sdf.format(checkOut) : "N/A");
    }
}

public class ReportingModule {
    static Scanner scanner = new Scanner(System.in);

    // Sample employee list
    static Map<String, String> employeeList = Map.of(
        "E001", "Alice",
        "E002", "Bob",
        "E003", "Charlie",
        "E004", "David"
    );

    // Simulated attendance log
    static List<AttendanceRecord> attendanceLogs = new ArrayList<>();

    public static void main(String[] args) {
        seedAttendance(); // Simulate attendance for demonstration

        while (true) {
            System.out.println("\n--- Reporting Module ---");
            System.out.println("1. Daily Report");
            System.out.println("2. Monthly Report");
            System.out.println("3. Absence Analysis");
            System.out.println("4. Export Report");
            System.out.println("5. Exit");
            System.out.print("Choose option: ");
            int option = scanner.nextInt();
            scanner.nextLine();

            switch (option) {
                case 1 -> dailyReport();
                case 2 -> monthlyReport();
                case 3 -> absenceAnalysis();
                case 4 -> exportReport();
                case 5 -> {
                    System.out.println("Exiting Reporting Module...");
                    return;
                }
                default -> System.out.println("Invalid option.");
            }
        }
    }

    static void seedAttendance() {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            attendanceLogs.add(new AttendanceRecord("E001", "Alice", sdf.parse("2025-06-24 09:00"), sdf.parse("2025-06-24 17:00")));
            attendanceLogs.add(new AttendanceRecord("E002", "Bob", sdf.parse("2025-06-24 09:15"), sdf.parse("2025-06-24 17:10")));
            attendanceLogs.add(new AttendanceRecord("E001", "Alice", sdf.parse("2025-06-25 09:00"), sdf.parse("2025-06-25 17:05")));
            attendanceLogs.add(new AttendanceRecord("E003", "Charlie", sdf.parse("2025-06-25 08:55"), sdf.parse("2025-06-25 17:00")));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static void dailyReport() {
        System.out.print("Enter date (yyyy-MM-dd): ");
        String date = scanner.nextLine();
        System.out.println("--- Daily Report for " + date + " ---");

        List<AttendanceRecord> records = new ArrayList<>();
        Set<String> presentIds = new HashSet<>();

        for (AttendanceRecord a : attendanceLogs) {
            if (a.getDateKey().equals(date)) {
                records.add(a);
                presentIds.add(a.empId);
            }
        }

        if (records.isEmpty()) {
            System.out.println("No attendance records found.");
        } else {
            for (AttendanceRecord r : records) {
                System.out.println(r);
            }
        }

        System.out.println("--- Absent Employees ---");
        for (String empId : employeeList.keySet()) {
            if (!presentIds.contains(empId)) {
                System.out.println(empId + " | " + employeeList.get(empId));
            }
        }
    }

    static void monthlyReport() {
        System.out.print("Enter month (yyyy-MM): ");
        String month = scanner.nextLine();
        System.out.println("--- Monthly Report for " + month + " ---");

        for (AttendanceRecord a : attendanceLogs) {
            if (a.getMonthKey().equals(month)) {
                System.out.println(a);
            }
        }
    }

    static void absenceAnalysis() {
        System.out.println("--- Absence Summary ---");
        Map<String, Set<String>> presentDays = new HashMap<>();

        for (AttendanceRecord a : attendanceLogs) {
            presentDays.putIfAbsent(a.empId, new HashSet<>());
            presentDays.get(a.empId).add(a.getDateKey());
        }

        for (String empId : employeeList.keySet()) {
            int daysPresent = presentDays.getOrDefault(empId, Set.of()).size();
            int workingDays = 2; // Based on seed data (2 days: 24th and 25th)
            int absents = workingDays - daysPresent;
            System.out.println(empId + " | " + employeeList.get(empId) + " | Present: " + daysPresent + " | Absent: " + absents);
        }
    }

    static void exportReport() {
        try {
            FileWriter writer = new FileWriter("Attendance_Report.txt");
            writer.write("=== Exported Attendance Report ===\n");

            for (AttendanceRecord a : attendanceLogs) {
                writer.write(a + "\n");
            }

            writer.close();
            System.out.println("Report exported successfully to Attendance_Report.txt");
        } catch (IOException e) {
            System.out.println("Error exporting report: " + e.getMessage());
        }
    }
}


---
Output

Daily Report

Enter date (yyyy-MM-dd): 2025-06-25
--- Daily Report for 2025-06-25 ---
E001 | Alice   | In: 2025-06-25 09:00 | Out: 2025-06-25 17:05
E003 | Charlie | In: 2025-06-25 08:55 | Out: 2025-06-25 17:00
--- Absent Employees ---
E002 | Bob
E004 | David


Monthly Report

Enter month (yyyy-MM): 2025-06
--- Monthly Report for 2025-06 ---
E001 | Alice   | In: 2025-06-24 09:00 | Out: 2025-06-24 17
